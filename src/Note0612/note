接口在开发中的作用
    注意：接口在开发中的作用，类似于多态在开发中的作用。
    多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。
    接口是不是完全的？是。
    而我们以后正好要求，面向抽象编程。
    面向抽象编程这句话以后可以修改为：面向接口编程。
    有了接口就有了可插拔。可插拔表示扩展力很强。不是焊接死的。

    主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新买一个换下来。这叫做高扩展性。（低耦合度）
    接口在现实世界中是不是到处都是呢？
        笔记本电脑和键盘之间有借口（usb接口，usb接口是不是某个计算机协会制定的协议/规范）
        接口有什么用？扩展性好。可插拔。
        接口是一个抽象的概念。
    总结：三个字"解耦合"
        接口的使用离不开多态机制。（接口+多态才可以达到降低耦合）

        接口可以解耦合，解开的是谁和谁的耦合！！！
        任何一个接口都有调用者和实现者。
        接口可以将调用者和实现者解耦合。
        调用者面向接口调用。
        实现者面向接口编写实现。

        以后进行大项目的开发，一般都是将项目分离成一个模块一个模块的。
        模块和模块之间采用接口衔接。降低耦合度。
类型和类型之间的关系：
    is a 、has a、 like a
        is a:
            Cat is a Animal(猫是一个动物)
            凡是能够满足is a的表示"继承关系"
            A extends B
        has a:
            I has a Pen(我又一支笔)
            凡是能够满足has a关系的表示"关联关系"
            关联关系通常以"属性"的形式存在。
            A{
                B b;
            }
        like a：
            Cooker like a FoodMenu(厨师像一个菜单一样)
            凡是能够满足like a关系的表示"实现关系"
            实现关系通常是：类实现接口。
            A implements B
抽象类和接口有什么区别？
    在这里我们只说以下抽象类和接口在语法上的区别。
    至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会/学习。

    抽象类是半抽象的。     抽象类中有构造方法         类和类之间只能单继承。           一个抽象类只能继承一个类（单继承）。
    接口是完全抽象的。     接口中没有构造方法         接口和接口之间支持多继承。        一个类可以同时实现多个接口。

    接口中只允许出现常量和抽象方法。
    接口使用的比抽象类多。一般抽象类使用的还是少。
    接口一般都是对"行为"的抽象。
