1、java的异常处理机制
    1.1、异常在java中以类和对象的形式存在。那么异常的继承结构是怎样的？
    我们可以使用UML图来描述一下继承结构。
    画UML图有很多工具，例如：Rational Rose(收费的)、starUML等....
        Object
        Object下有Throwable(可抛出的)
        Throwable下有两个分支：Error（不可处理，直接退出JVM）和Exception（可处理的）
        Exception下有两个分支：
            Exception的直接子类：编译时异常（要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理编译器报错，因此得名编译时异常）
            RuntimeException:运行时异常（在编写程序阶段程序员可以预先处理，也可以不管，都行。）
    1.2、编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。
    编译时异常因为什么而得名？
        因为编译时异常必须在编译（编写）阶段预先处理，如果不处理编译器报错，因此得名。
        所有异常都是在运行阶段发生的。因为只有程序运行阶段才可以new对象。
        因为异常的发生就是new异常对象。
    1.3、编译时异常和运行时异常的区别？
        编译时异常一般发生的概率比较高。
            对于一些发生  概率较高的异常，需要在运行之前对其进行预处理
        运行时异常一般发生的概率比较低。
    1.4、编译时异常还有其他名字：
        受检异常：CheckedException
        受控异常
    1.5、运行时异常还有其它名字：
        未受检异常：UnCheckedException
        非受控异常
    1.6、再次强调：所有异常都是发生在运行阶段的。
    1.7、Java语言中对异常的处理包括两种方式：
        第一种方式：在方法声明的位置上，使用throws关键字，抛给上一级。
            谁调用我，我就抛给谁。抛给上一级。
        第二种方式：使用try..catch语句进行异常的捕捉。
            这件事发生了，谁也不知道，因为我给抓住了。
        举个例子：
            我是某集团的一个销售员，因为我的失误，导致公司损失了1000元，
            "损失1000元"这可以看做是一个异常发生了。我有两种处理方式，
            第一种方式：我把这件事告诉我的领导【异常上抛】
            第二种方式：我自己掏腰包把这个钱补上。【异常的捕捉】
        思考：
            异常发生之后，如果我选择了上抛，抛给了我的调用者，调用者需要
            对这个异常继续处理，那么调用者处理这个异常同样有两种处理方式。
    1.8、注意：Java中异常发生之后如果一直上抛，最终抛给了main方法，main方法继续
    向上抛，抛给了调用者JVM，JVM知道这个异常发生，只有一个结果。终止java程序的执行。


2、什么是UML？有什么用？
    UML是一种统一建模语言。
    一种图标式语言（画图的）
    UML不是只有java中使用，。只要是面向对象的编程语言，都有UML。
    一般画UML图的都是软件架构师或者说是系统分析师。这些级别的人员使用的。
    软件设计人员使用UML。

    在UML图中可以描述类和类之间的关系，程序执行的流程，对象的状态等

    盖大楼和软件开发一样，一个道理。
        盖楼之前，会先由建筑师画图纸。图纸上一个一个符号都是标准符号。
        这个图纸画完，只要是搞建筑的都能看懂，因为这个图纸上标注的这些
        符号都是一种"标准的语言"。

    在java软件开发当中，软件分析师/设计师负责设计类，java软件开发人员
    必须要能看懂。
















